import requests
from langchain_core.tools import tool
import re
import base64
import os
import tempfile
from datetime import datetime
from utils.s3_utils import upload_file_to_s3


@tool
def sandbox_code_tool(code: str, requirements: list[str] = [], language: str = "python") -> str:
    """
    Runs LLM-generated Python or Node.js code inside an isolated Docker sandbox.
    Supports matplotlib image generation with base64 encoding for markdown display.
    Automatically uploads generated images to S3 and returns image links.

    Parameters:
    - code: The source code generated by the language model to execute.
    - requirements: A list of dependencies to install via pip (Python) or npm (Node.js).
    - language: Either 'python' or 'node'.

    Returns:
    - A string combining stdout and stderr from the execution result with S3 image links.
    """
    print("running code")
    response = requests.post("http://localhost:8000/run", json={
        "code": code,
        "requirements": requirements,
        "language": language
    })
    print("response", response)
    out = response.json()
    stdout = out.get('stdout', '')
    stderr = out.get('stderr', '')
    # Save stdout to local file
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    output_dir = "sandbox_outputs"
    os.makedirs(output_dir, exist_ok=True)
    
    output_file = os.path.join(output_dir, f"stdout_{timestamp}.txt")
    with open(output_file, "w") as f:
        f.write(stdout)
    print("saved stdout to", output_file)
    # Extract base64 images from stdout
    image_pattern = r'IMAGE_BASE64:([A-Za-z0-9+/=]+)'
    images = re.findall(image_pattern, stdout)
    # Remove the IMAGE_BASE64: prefix from stdout for cleaner output
    clean_stdout = re.sub(image_pattern, '', stdout).strip()
    
    # Build the response
    result = f"STDOUT:\n{clean_stdout}"
    error = f"\nSTDERR:\n{stderr}"
    
    # Process images and upload to S3
    if images:
        result += "\n\n## Generated Visualizations:\n\n"
        bucket_name = os.getenv('AWS_BUCKET', 'your-test-bucket-name')
        
        for i, image_data in enumerate(images):
            
            try:

                # Decode base64 data
                image_bytes = base64.b64decode(image_data)
                print(f"Decoded image bytes length: {len(image_bytes)} bytes")
                print(f"First 50 bytes: {image_bytes[:50]}")
            
                # Check if it's a valid PNG file
                if image_bytes.startswith(b'\x89PNG\r\n\x1a\n'):
                    print("✓ Valid PNG file header detected")
                else:
                    print("✗ Invalid PNG file header")
                    print(f"Expected: b'\\x89PNG\\r\\n\\x1a\\n'")
                    print(f"Got: {image_bytes[:8]}")
                # Create temporary file
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                temp_filename = f"generated_image_{timestamp}_{i+1}.png"
                
                with tempfile.NamedTemporaryFile(delete=False, suffix='.png', prefix='sandbox_') as temp_file:
                    temp_file.write(image_bytes)
                    temp_file_path = temp_file.name
                

                # Upload to S3
                upload_result = upload_file_to_s3(
                    file_path=temp_file_path,
                    bucket_name=bucket_name,
                    key=f"images/{temp_filename}",
                    content_type="image/png",
                   
                )
                print("temp_file_path", temp_file_path)
                # Clean up temporary file
                os.unlink(temp_file_path)
                
                if upload_result.get('success'):
                    # Add S3 image link to result
                    s3_url = upload_result.get('https_url', '')
                    result += f"![Generated Visualization {i+1}]({s3_url})\n\n"
                else:
                    # Fallback to base64 if S3 upload fails
                    error_msg = upload_result.get('error', 'Unknown error')
                    result += f"**Upload Error:** {error_msg}\n\n"
                    # Include base64 data as fallback for debugging
                    result += f"**Base64 Image Data (first 100 chars):** `{image_data[:100]}...`\n\n"
                    
            except Exception as e:
                # Fallback to base64 if any error occurs
                result += f"**Error processing image {i+1}:** {str(e)}\n\n"
    result += error
    return result